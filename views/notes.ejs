<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #000000;
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items: center;
        color: white;
        text-align: center;
      }

      h1 {
        color: #3e3939;
        background-color: #a1ac08;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        position: relative;
        top: -20px;
        padding: 20px;
        z-index: 10;
      }
      #user_email {
        color: #a1ac08;
        margin-bottom: 20px;
        position: relative;
        top: -58px;
        background-color: rgb(57, 51, 51);
        padding: 20px;
        z-index: -1;
        animation: move 3s ease-in-out infinite;
      }

      @keyframes move {
        0% {
          transform: translateY(0%);
        }
        50% {
          transform: translateY(-100%);
        }
        100% {
          transform: translateY(0%);
        }
      }

      #postForm {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin-bottom: 20px;
        background-color: #222020;
        justify-content: space-around;
        gap: 10px;
        padding: 30px;
        border-radius: 10px;
        box-shadow: inset -1px 1px 8px 1px black;
      }
      input {
        width: 300px;
        padding: 10px;
        outline: none;
        background-color: rgb(53, 49, 49);
        border: none;
        border-radius: 5px;
        color: white;
        margin-bottom: 10px;
        box-sizing: border-box;
        font-size: 16px;
      }
      button {
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        position: relative;
        top: -5px;
        background-color: orange;
        color: white;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }
      button:hover {
        background-color: #0056b3;
      }
      .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        padding: 10px;
        height: 150px;
        overflow: auto;
        background-color: rgb(47, 44, 44);
        border: 1px solid white;
        border-radius: 5px;
        scroll-behavior: smooth;
      }
      .box {
        height: 100px;
        width: 400px;
        background-color: #3e3939;
        color: white;
        margin-top: 10px;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        flex-direction: column;
        justify-content: center;
        box-shadow: 20px 4px 2px rgba(0, 0, 0, 0.2);
        text-align: center;
      }
      .button_div {
        display: flex;
        justify-content: space-around;
        width: 100%;
      }
      .sort_div {
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 10px;
        height: 40px;
        width: 200px;
        background-color: rgb(76, 68, 68);
        position: absolute;
        border-bottom-left-radius: 10px;
        top: 0;
        right: 0;
      }
      select {
        background-color: rgb(255, 234, 0);
        border: none;
        border-radius: 5px;
        color: rgb(0, 0, 0);
        padding: 5px;
        outline: none;
      }
      option {
        border-radius: 5x;
        padding: 5px;
        border: none;
      }
      /* #check{
    position: relative;
    top:-45px;
    left:115px;
  } */

      .sort_box {
        background-color: rgb(255, 255, 255);
        color: rgb(0, 0, 0);

        height: 45px;
        width: 300px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 10px;
        display: none;
      }
      .tags_div {
        position: absolute;
        left: 0;
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 10px;
        height: 40px;
        width: 200px;
        background-color: rgb(76, 68, 68);
        top: 0;
        border-bottom-right-radius: 10px;
      }
      .tags_container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        padding: 10px;
        height: 150px;
        overflow: auto;
        background-color: rgb(47, 44, 44);
        border: 1px solid white;
        border-radius: 5px;
        scroll-behavior: smooth;
      }
      .tags_container div {
        height: 100px;
        width: 400px;
        background-color: #3e3939;
        color: white;
        margin-top: 10px;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        flex-direction: column;
        justify-content: center;
        box-shadow: 20px 4px 2px rgba(0, 0, 0, 0.2);
        text-align: center;
      }
      .tags_notfound {
        position: absolute;
        top: 0;
        left: 0;
        background-color: rgb(88, 65, 65);
        color: yellow;
        padding: 20px;
        border-bottom-right-radius: 10px;
      }
    </style>
    <div class="tags_div">
      <label for="prev_tag">prev_tags : </label>
      <select name="tag" id="tag_box">
        <option value="default">Default</option>
      </select>
    </div>
    <div class="tags_notfound">
      <p>sorry user have no tags</p>
    </div>
    <h1>Hello, what's on your mind?</h1>
    <p id="user_email"><%=email%></p>
    <form id="postForm">
      <input
        type="text"
        name="post"
        id="postInput"
        placeholder="Type something..."
      />
      <input
        type="text"
        name="tags"
        id="tag_inp"
        placeholder="Plz choose tag..."
      />

      <button type="submit" id="check">Submit</button>
    </form>
    <div class="container"></div>
    <div class="tags_container" style="display: none; color: whitesmoke"></div>
    <div id="sort_tags" style="display: none">
      <label for="tags">Sort tags Notes: </label>
      <select name="sort" id="sort_tag">
        <option value="default">Default</option>
        <option value="latest" id="latest_note">Latest</option>
        <option value="oldest" id="oldest_note">Oldest</option>
      </select>
    </div>
    <div class="sort_div">
      <label for="cars">Sort Notes: </label>
      <select name="sort" id="sort">
        <option value="default">Default</option>
        <option value="latest" id="latest">Latest</option>
        <option value="oldest" id="oldest">Oldest</option>
      </select>
    </div>

    <div class="error">
      <h1>user have no post yet</h1>
    </div>

    <div class="sort_box" style="display: none; color: rgb(57, 59, 60)">
      <p>helo</p>
    </div>

    <script>
      var email = document.querySelector("#user_email").textContent;
      var userPosts = [];
      var sort_managerarr = [];

      document
        .getElementById("postForm")
        .querySelector("button")
        .addEventListener("click", submit_post);

      async function submit_post(event) {
        alert("helo");
        document.querySelector(".tags_container").style.display = "none";
        event.preventDefault();
        const postInput = document.getElementById("postInput");
        const postText = postInput.value.trim();
        const tag = document.getElementById("tag_inp").value.trim();
        console.log(tag);
        document.querySelector(".container").style.display = "flex";
        document.querySelector(".error").style.display = "none";

        if (!postText) return;

        const box = document.createElement("div");
        const post = document.createElement("p");
        const button_div = document.createElement("div");
        const editbutton = document.createElement("button");
        const deletebutton = document.createElement("button");

        editbutton.textContent = "Edit";
        deletebutton.textContent = "Delete";
        button_div.classList.add("button_div");
        button_div.appendChild(editbutton);
        button_div.appendChild(deletebutton);
        box.classList.add("box");

        post.textContent = postText;
        box.appendChild(post);
        box.appendChild(button_div);
        document.querySelector(".container").appendChild(box);

        postInput.value = "";

        try {
          await fetch("http://localhost:4000/submit_note", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ new_post: postText, email, tag }),
          });
        } catch (err) {
          console.error("Error submitting post:", err);
        }

        deletebutton.addEventListener("click", () =>
          delete_post(box, postText)
        );
        editbutton.addEventListener("click", () => {
          const newPostText = prompt("Enter new post:");
          if (newPostText) {
            edit_post(postText, newPostText, email).then(() => {
              post.textContent = newPostText;
            });
          }
        });
      }

      async function delete_post(boxElement, postText) {
        try {
          await fetch("http://localhost:4000/delete_post", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_post: postText, email }),
          });
          boxElement.remove();
        } catch (err) {
          console.error("Error deleting post:", err);
        }
      }

      async function edit_post(oldPostText, newPostText, email) {
        try {
          await fetch("http://localhost:4000/edit_post", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              post: oldPostText,
              newpost: newPostText,
              email,
            }),
          });
        } catch (err) {
          console.error("Error editing post:", err);
        }
      }

      async function get_data() {
        try {
          const response = await fetch("/get_data");
          return await response.json();
        } catch (err) {
          console.error("Failed to fetch data:", err);
        }
      }

      async function display_post() {
        const data = await get_data();
        if (!data) return;

        userPosts = data.filter((item) => item.email === email);
        console.log(userPosts);

        if (userPosts.length <= 0) {
          document.querySelector(".error").style.display = "block";
          document.querySelector(".container").style.display = "none";
        }
        userPosts.forEach((item) => {
          document.querySelector(".error").style.display = "none";
          const post_div = document.createElement("div");
          const post = document.createElement("p");
          const button_div = document.createElement("div");
          const editbutton = document.createElement("button");
          const deletebutton = document.createElement("button");

          editbutton.textContent = "Edit";
          deletebutton.textContent = "Delete";
          button_div.classList.add("button_div");
          button_div.appendChild(editbutton);
          button_div.appendChild(deletebutton);
          post_div.classList.add("box");

          post.textContent = item.post;
          post_div.appendChild(post);
          post_div.appendChild(button_div);
          document.querySelector(".container").appendChild(post_div);

          deletebutton.addEventListener("click", () =>
            delete_post(post_div, item.post)
          );
          editbutton.addEventListener("click", () => {
            const newPostText = prompt("Enter new post:");
            if (newPostText) {
              edit_post(item.post, newPostText, email).then(() => {
                post.textContent = newPostText;
              });
            }
          });
        });
      }

      async function latest_note() {
        const data = userPosts;
        const length = data.length;
        document.querySelector(".container").style.display = "none";
        console.log(data);
        const latest_note = data[length - 1].post;
        console.log(latest_note);
        document.querySelector(".sort_box").style.display = "block";
        document.querySelector(".sort_box").querySelector("p").innerHTML =
          latest_note;
      }

      async function oldest_note() {
        const data = userPosts;
        const length = data.length;
        console.log(data);
        document.querySelector(".container").style.display = "none";
        const oldest_note = data[0].post;
        console.log(oldest_note);
        document.querySelector(".sort_box").style.display = "block";
        document.querySelector(".sort_box").querySelector("p").innerHTML =
          oldest_note;
      }

      function sort_post() {
        document.querySelector("#sort").addEventListener("change", function () {
          const selectedValue = this.value;
          if (selectedValue === "default") {
            document.querySelector(".container").style.display = "flex";
            document.querySelector(".sort_box").style.display = "none";
          } else if (selectedValue === "latest") {
            latest_note();
          } else if (selectedValue === "oldest") {
            oldest_note();
          }
        });
      }

      async function display_tags() {
        const data_arr = await get_data();
        const data = data_arr.filter((item) => item.email === email);
        console.log(data);

        let duplicate_tags = [];
        for (let i = 0; i < data.length; i++) {
          if (data[i].tags !== null) {
            duplicate_tags.push(data[i].tags);
          }
        }
        const tag_arr = [...new Set(duplicate_tags)];
        if (tag_arr.length >= 1) {
          console.log(tag_arr);

          let tag_box = document.querySelector("#tag_box");
          for (let i = 0; i < tag_arr.length; i++) {
            const opt = document.createElement("option");

            opt.innerHTML = tag_arr[i];
            opt.value = tag_arr[i];
            console.log(tag_arr[i]);
            tag_box.appendChild(opt);
            document.querySelector(".tags_notfound").style.display = "none";
          }

          var selectedValue = "";
          document
            .querySelector("#tag_box")
            .addEventListener("change", function () {
              selectedValue = this.value;
              console.log(selectedValue);
              if (selectedValue === "default") {
                document.querySelector(".container").style.display = "flex";
                document.querySelector(".sort_div").style.display = "flex";
                document.querySelector(".tags_container").style.display =
                  "none";
                document.getElementById("sort_tags").style.display = "none";
              }

              document.querySelector(".tags_container").textContent = "";
              for (let i = 0; i < userPosts.length; i++) {
                if (userPosts[i].tags === selectedValue) {
                  console.log("helo alka");
                  const box = document.createElement("div");
                  document.querySelector(".container").style.display = "none";

                  const para = document.createElement("p");
                  para.innerHTML = userPosts[i].post;
                  box.appendChild(para);
                  sort_managerarr.push(userPosts[i].post);
                  document.querySelector(".tags_container").appendChild(box);
                  document.getElementById("sort_tags").style.display = "flex";

                  document.querySelector(".tags_container").style.display =
                    "flex";
                  document.querySelector(".sort_div").style.display = "none";
                  console.log(sort_managerarr);
                  manage_sortfilter();
                }
              }
            });
        } else {
          document.querySelector(".tags_notfound").style.display = "flex";
          document.querySelector(".tags_div").style.display = "none";
        }
      }
      
      function manage_sortfilter() {
        document
          .querySelector("#sort_tags")
          .querySelector("select")
          .addEventListener("change", function () {
            const selectedValue = this.value;
            if (selectedValue === "default") {
              document.querySelector(".container").style.display = "flex";
              document.querySelector(".sort_box").style.display = "none";
              document.querySelector('#sort_tags').style.display = 'none';
              document.querySelector('.sort_div').style.display = 'flex';

            } else if (selectedValue === "latest") {
              document.querySelector(".tags_container").style.display =
              "none";
              document.querySelector('.sort_box').innerHTML = sort_managerarr.at(0);
              document.querySelector(".sort_box").style.display = "flex";

            } else if (selectedValue === "oldest") {
              document.querySelector(".tags_container").style.display =
              "none";
              document.querySelector('.sort_box').innerHTML = sort_managerarr.at(-1);
              document.querySelector(".sort_box").style.display = "flex";
            }
          });
      }
      display_post();
      sort_post();
      display_tags();
     
    </script>
  </body>
</html>
